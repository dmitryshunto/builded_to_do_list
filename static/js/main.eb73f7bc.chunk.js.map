{"version":3,"sources":["redux/to_do_tasks_reducer.ts","redux/in_progress_tasks_reducer.ts","Components/ToDoTasks/ToDoTasks.tsx","redux/done_tasks_reducer.ts","redux/redux.ts","Components/InProgressTasks/InProgressTasks.tsx","Components/DoneTasks/DoneTasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ADD_TASK_TO_LIST","REMOVE_TASK_FROM_LIST","actions","add_task_task_to_list","task_text","type","remove_task_task_to_list","task_id","initial_state","tasks","to_do_tasks_reducer","state","action","task","id","length","filter","in_progress_tasks_reducer","text","start_time","Date","now","CurrentTask","props","className","index","onClick","remove_task_from_list","add_task_to_in_progress_list","NewTask","onChange","e","cb","currentTarget","value","map_dispatch_to_props","add_task_to_list","in_progress_actions","connect","to_do_tasks","useState","new_task_text","set_new_task_text","map","complition_time","remove_task_to_list","done_tasks_reducer","root_reducer","combineReducers","in_progress_tasks","done_tasks","store","createStore","InProgressTask","task_time","set_task_time","setTimeout","new_task_time","time_items","getHours","getTimezoneOffset","getMinutes","getSeconds","time_for_ui","forEach","item","add_task_to_done_list","done_tasks_actions","DoneTask","cost","Math","round","App","AppContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb73f7bc.chunk.js","sourcesContent":["import { PropertiesType } from \"./redux\"\r\nconst ADD_TASK_TO_LIST = 'TO_DO_TASKS_REDUCER/ADD_TASK_TO_LIST'\r\nconst REMOVE_TASK_FROM_LIST = 'TO_DO_TASKS_REDUCER/REMOVE_TASK_FROM_LIST'\r\n\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    task: string\r\n}\r\n\r\nexport const actions = {\r\n    add_task_task_to_list: (task_text: string) => {\r\n        return { type: ADD_TASK_TO_LIST, task_text } as const\r\n    },\r\n    remove_task_task_to_list: (task_id: number) => {\r\n        return { type: REMOVE_TASK_FROM_LIST, task_id } as const\r\n    }\r\n}\r\n\r\nlet initial_state = {\r\n    tasks: null as TaskType[] | null\r\n}\r\n\r\ntype ActionsTypes = ReturnType<PropertiesType<typeof actions>>\r\n\r\nconst to_do_tasks_reducer = (state = initial_state, action: ActionsTypes) => {\r\n    switch (action.type) {\r\n        case ADD_TASK_TO_LIST: {\r\n            if (action.task_text) {\r\n                let tasks\r\n                if (!state.tasks) {\r\n                    let task: TaskType = { id: 0, task: action.task_text }\r\n                    tasks = [task]\r\n                } else {\r\n                    let task: TaskType = { id: state.tasks.length, task: action.task_text }\r\n                    tasks = [...state.tasks, task]\r\n                }\r\n                return {\r\n                    ...state,\r\n                    tasks\r\n                }\r\n            } else return state\r\n        }\r\n        case REMOVE_TASK_FROM_LIST: {\r\n\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks!.filter(task => task.id !== action.task_id)\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default to_do_tasks_reducer\r\n","import { PropertiesType } from \"./redux\"\r\nconst ADD_TASK_TO_LIST = 'IN_PROGRESS_TASKS_REDUCER/ADD_TASK_TO_LIST'\r\nconst REMOVE_TASK_FROM_LIST = 'IN_PROGRESS_TASKS_REDUCER/REMOVE_TASK_FROM_LIST'\r\n\r\nexport type InPropgressTaskType = {\r\n    id: number\r\n    text: string\r\n    start_time: number\r\n}\r\n\r\nexport const actions = {\r\n    add_task_task_to_list: (task_text: string) => {\r\n        return {type: ADD_TASK_TO_LIST, task_text} as const\r\n    },\r\n    remove_task_task_to_list: (task_id: number) => {\r\n        return {type: REMOVE_TASK_FROM_LIST, task_id} as const\r\n    }\r\n}\r\n\r\nlet initial_state = {\r\n    tasks: null as InPropgressTaskType[] | null\r\n}\r\n\r\ntype ActionsTypes = ReturnType<PropertiesType<typeof actions>>\r\n\r\nconst in_progress_tasks_reducer = (state = initial_state, action: ActionsTypes) => {\r\n    switch(action.type) {\r\n        case ADD_TASK_TO_LIST: {\r\n            let tasks\r\n            if(!state.tasks) {\r\n                let task: InPropgressTaskType = {id: 0, text: action.task_text, start_time: Date.now()}\r\n                tasks = [task]\r\n            } else {\r\n                let task: InPropgressTaskType = {id: state.tasks.length, text: action.task_text, start_time: Date.now()}\r\n                tasks = [...state.tasks, task]\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks\r\n            }\r\n        }\r\n        case REMOVE_TASK_FROM_LIST: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks!.filter(task => task.id !== action.task_id)\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default in_progress_tasks_reducer\r\n","import React, { ChangeEvent, Dispatch, SetStateAction, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStoreType } from '../../redux/redux'\r\nimport { TaskType, actions } from '../../redux/to_do_tasks_reducer'\r\nimport { actions as in_progress_actions } from '../../redux/in_progress_tasks_reducer'\r\n\r\nconst ToDoTasks: React.FC<MaDispatchToPropsType & MapStateToPropsType> = (props) => {\r\n    let [new_task_text, set_new_task_text] = useState<string>('')\r\n    let tasks = null\r\n    if(props.tasks) {\r\n        tasks = props.tasks.map((task, index) => <CurrentTask key = {task.id}\r\n                                                                 index = {index + 1}\r\n                                                                 id = {task.id}\r\n                                                                 add_task_to_in_progress_list = {props.add_task_to_in_progress_list}\r\n                                                                 remove_task_from_list = {props.remove_task_from_list}\r\n                                                                 task_text = {task.task}/>)\r\n    }\r\n    return (\r\n        <div className = 'comp'>\r\n            <h3>To Do</h3>\r\n            {tasks}\r\n            <NewTask cb = {set_new_task_text}\r\n                     value = {new_task_text}/>\r\n            <button onClick = {() => {\r\n                    props.add_task_to_list(new_task_text)\r\n                    set_new_task_text('')}}>\r\n                Add task\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype CurrentTaskType = {\r\n    index: number\r\n    id: number\r\n    task_text: string\r\n    remove_task_from_list: typeof actions.remove_task_task_to_list\r\n    add_task_to_in_progress_list: typeof in_progress_actions.add_task_task_to_list\r\n}\r\n\r\nconst CurrentTask: React.FC<CurrentTaskType> = (props) => {\r\n    const delete_task = () => {\r\n        props.remove_task_from_list(props.id)\r\n    }\r\n    const add_task_to_in_progress_list = () => {\r\n        props.remove_task_from_list(props.id)\r\n        props.add_task_to_in_progress_list(props.task_text)\r\n    }\r\n    return (\r\n        <div className = 'task'>\r\n            {`${props.index}. ${props.task_text}`}\r\n            <button onClick = {delete_task}>x</button>\r\n            <button onClick = {add_task_to_in_progress_list}>Add to In progress</button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype NewTaskTypes = {\r\n    cb: Dispatch<SetStateAction<string>>,\r\n    value: string\r\n}\r\n\r\nconst NewTask: React.FC<NewTaskTypes> = (props) => {\r\n    const onTaskTextChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.cb(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <input type = {'text'} onChange = {onTaskTextChange} value = {props.value}/>\r\n    )\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    tasks: null | TaskType[]\r\n}\r\n\r\nconst map_state_to_props = (state: AppStoreType): MapStateToPropsType => {\r\n    return { tasks: state.to_do_tasks.tasks }\r\n}\r\n\r\ntype MaDispatchToPropsType = {\r\n    add_task_to_list: typeof actions.add_task_task_to_list\r\n    remove_task_from_list: typeof actions.remove_task_task_to_list\r\n    add_task_to_in_progress_list: typeof in_progress_actions.add_task_task_to_list\r\n}\r\n\r\nconst map_dispatch_to_props = {\r\n    add_task_to_list: actions.add_task_task_to_list,\r\n    remove_task_from_list: actions.remove_task_task_to_list,\r\n    add_task_to_in_progress_list: in_progress_actions.add_task_task_to_list\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MaDispatchToPropsType, {}, AppStoreType>(map_state_to_props, map_dispatch_to_props)(ToDoTasks)","import { PropertiesType } from \"./redux\"\r\nconst ADD_TASK_TO_LIST = 'DONE_TASKS_REDUCER/ADD_TASK_TO_LIST'\r\nconst REMOVE_TASK_FROM_LIST = 'DONE_TASKS_REDUCER/REMOVE_TASK_FROM_LIST'\r\n\r\nexport type DoneTaskType = {\r\n    id: number\r\n    text: string\r\n    complition_time: number\r\n}\r\n\r\nexport const actions = {\r\n    add_task_to_list: (task_text: string, complition_time: number) => {\r\n        return {type: ADD_TASK_TO_LIST, task_text, complition_time} as const\r\n    },\r\n    remove_task_to_list: (task_id: number) => {\r\n        return {type: REMOVE_TASK_FROM_LIST, task_id} as const\r\n    }\r\n}\r\n\r\nlet initial_state = {\r\n    tasks: null as DoneTaskType[] | null\r\n}\r\n\r\ntype ActionsTypes = ReturnType<PropertiesType<typeof actions>>\r\n\r\nconst done_tasks_reducer = (state = initial_state, action: ActionsTypes) => {\r\n    // debugger\r\n    switch(action.type) {\r\n        case ADD_TASK_TO_LIST: {\r\n            let tasks\r\n            if(!state.tasks) {\r\n                let task: DoneTaskType = {id: 0, text: action.task_text, complition_time: action.complition_time}\r\n                tasks = [task]\r\n            } else {\r\n                let task: DoneTaskType = {id: state.tasks.length, text: action.task_text, complition_time: action.complition_time}\r\n                tasks = [...state.tasks, task]\r\n            }\r\n            return {\r\n                ...state,\r\n                tasks\r\n            }\r\n        }\r\n        case REMOVE_TASK_FROM_LIST: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks!.filter(task => task.id !== action.task_id)\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default done_tasks_reducer\r\n","import { createStore, combineReducers} from \"redux\"\r\nimport done_tasks_reducer from \"./done_tasks_reducer\"\r\nimport in_progress_tasks_reducer from \"./in_progress_tasks_reducer\"\r\nimport to_do_tasks_reducer from \"./to_do_tasks_reducer\"\r\n\r\nconst root_reducer = combineReducers({\r\n    to_do_tasks: to_do_tasks_reducer,\r\n    in_progress_tasks: in_progress_tasks_reducer,\r\n    done_tasks: done_tasks_reducer\r\n})\r\n\r\nconst store = createStore(root_reducer)\r\n\r\ntype RootReducerType = typeof root_reducer\r\nexport type AppStoreType = ReturnType<RootReducerType>\r\nexport type PropertiesType<T> = T extends {[key: string]: infer U} ? U : never\r\n\r\nexport default store","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { AppStoreType } from '../../redux/redux'\r\nimport { InPropgressTaskType, actions } from '../../redux/in_progress_tasks_reducer'\r\nimport { actions as done_tasks_actions} from '../../redux/done_tasks_reducer'\r\n\r\n\r\nconst InProgressTasks: React.FC<MaDispatchToPropsType & MapStateToPropsType> = (props) => {\r\n    let tasks = null\r\n    if(props.tasks) {\r\n        tasks = props.tasks.map((task, index) => <InProgressTask key = {task.id}\r\n                                                                 index = {index + 1}               \r\n                                                                 start_time = {task.start_time}\r\n                                                                 id = {task.id}\r\n                                                                 remove_task_from_list = {props.remove_task_from_list}\r\n                                                                 add_task_to_done_list =  {props.add_task_to_done_list}\r\n                                                                 task_text = {task.text}/>)\r\n    }\r\n    return (\r\n        <div className = 'comp'>\r\n            <h3>In Progress</h3>\r\n            {tasks}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype InProgressTaskType = {\r\n    index: number\r\n    start_time: number\r\n    id: number\r\n    task_text: string\r\n    remove_task_from_list: typeof actions.remove_task_task_to_list\r\n    add_task_to_done_list: typeof done_tasks_actions.add_task_to_list\r\n}\r\n\r\nconst InProgressTask: React.FC<InProgressTaskType> = (props) => {\r\n    const [task_time, set_task_time] = useState<string>('start')\r\n    \r\n    const delete_task = () => {\r\n        props.remove_task_from_list(props.id)\r\n    }\r\n\r\n    let complition_time = Date.now() - props.start_time\r\n\r\n    const resolve_task = () => {\r\n        props.remove_task_from_list(props.id)\r\n        props.add_task_to_done_list(props.task_text, Date.now() - props.start_time)\r\n    }\r\n\r\n    setTimeout(() => {\r\n        let new_task_time = new Date(complition_time)\r\n        const time_items = [new_task_time.getHours() + new_task_time.getTimezoneOffset()/60, new_task_time.getMinutes(), new_task_time.getSeconds()]\r\n        let time_for_ui = ''\r\n        time_items.forEach((item, index) => {\r\n            if(index < time_items.length - 1) {\r\n                time_for_ui += item < 10 ? `0${item}:` : `${item}:`\r\n            } else {\r\n                time_for_ui += item < 10 ? `0${item}` : `${item}`\r\n            }\r\n        })\r\n        set_task_time(time_for_ui)\r\n    }, 1000)\r\n    return (\r\n        <div className = 'task'>\r\n            <div>{`${props.index}. ${props.task_text}`}</div>\r\n            <div>{task_time}</div>\r\n            <button onClick = {delete_task}>x</button>\r\n            <button onClick = {resolve_task}>Resolve</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    tasks: null | InPropgressTaskType[]\r\n}\r\n\r\nconst map_state_to_props = (state: AppStoreType): MapStateToPropsType => {\r\n    return { tasks: state.in_progress_tasks.tasks }\r\n}\r\n\r\ntype MaDispatchToPropsType = {\r\n    add_task_to_list: typeof actions.add_task_task_to_list\r\n    remove_task_from_list: typeof actions.remove_task_task_to_list\r\n    add_task_to_done_list: typeof done_tasks_actions.add_task_to_list\r\n}\r\n\r\nconst map_dispatch_to_props = {\r\n    add_task_to_list: actions.add_task_task_to_list,\r\n    remove_task_from_list: actions.remove_task_task_to_list,\r\n    add_task_to_done_list: done_tasks_actions.add_task_to_list\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MaDispatchToPropsType, {}, AppStoreType>(map_state_to_props, map_dispatch_to_props)(InProgressTasks)","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { actions, DoneTaskType } from '../../redux/done_tasks_reducer'\r\nimport { AppStoreType } from '../../redux/redux'\r\n\r\nconst hourly_rate = 10\r\n\r\nconst DoneTasks: React.FC<MapStateToPropsType & MaDispatchToPropsType> = (props) => {\r\n    let tasks = null\r\n    if(props.tasks) {\r\n        tasks = props.tasks.map((task, index) => <DoneTask key = {task.id}\r\n                                                    index = {index + 1}\r\n                                                    id = {task.id}\r\n                                                    remove_task_from_list = {props.remove_task_from_list}\r\n                                                    complition_time = {task.complition_time}\r\n                                                    task_text = {task.text}/>)\r\n    }\r\n    return (\r\n        <div className = 'comp'>\r\n            <h3>Done Tasks (hourly rate is 10$)</h3>\r\n            {tasks}            \r\n        </div>\r\n    )\r\n}\r\n\r\ntype DoneTaskPropsType = {\r\n    index: number\r\n    task_text: string\r\n    complition_time: number\r\n    id: number\r\n    remove_task_from_list: typeof actions.remove_task_to_list\r\n}\r\n\r\nconst DoneTask: React.FC<DoneTaskPropsType> = (props) => {\r\n    const delete_task = () => {\r\n        props.remove_task_from_list(props.id)\r\n    }\r\n    const cost = Math.round(props.complition_time / 1000 / 3600 * hourly_rate * 100) / 100\r\n\r\n\r\n    return (\r\n        <div className = 'task'>\r\n            <div>{`${props.index}. ${props.task_text}`}</div>\r\n            <div>{`${cost} $`}</div>\r\n            <button onClick = {delete_task}>x</button>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    tasks: null | DoneTaskType[]\r\n}\r\n\r\nconst map_state_to_props = (state: AppStoreType): MapStateToPropsType => {\r\n    return { tasks: state.done_tasks.tasks }\r\n}\r\n\r\ntype MaDispatchToPropsType = {\r\n    remove_task_from_list: typeof actions.remove_task_to_list\r\n}\r\n\r\nconst map_dispatch_to_props = {\r\n    remove_task_from_list: actions.remove_task_to_list\r\n}\r\n\r\nexport default connect<MapStateToPropsType, MaDispatchToPropsType, {}, AppStoreType>(map_state_to_props, map_dispatch_to_props)(DoneTasks)","import React from 'react'\nimport ToDoTasks from './Components/ToDoTasks/ToDoTasks'\nimport { Provider } from 'react-redux';\nimport store from './redux/redux';\nimport InProgressTasks from './Components/InProgressTasks/InProgressTasks';\nimport DoneTasks from './Components/DoneTasks/DoneTasks';\nimport './App.css'\n\nconst App = () => {\n  return (\n    <div className = {'app'}>\n      <ToDoTasks/>\n      <InProgressTasks />\n      <DoneTasks />    \n    </div>\n  );\n}\n\nconst AppContainer = () => {\n  return (\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  )\n}\n\nexport default AppContainer;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}